#include<stdio.h>
#include<stdlib.h>
#define MAX 100
struct node{
int val;
struct node *left;
struct node *right;
};
struct queue{
    struct node *val[MAX];
    int front;
    int rear;
};
void enqueue(struct queue *q,struct node *p){
    if(q->rear==MAX-1)
        printf("\n LIST IS FULL\n");
    q->val[++(q->rear)]=p;
    }

struct node* dequeue(struct queue *q){
    struct node *temp;
    if(q->front==q->rear){
    return NULL;}
    else{
         temp=q->val[++(q->front)];
          if(q->front==q->rear)
        q->front=q->rear=0;
         return temp;
    }
}
struct node *newnode(int data){
struct node *p;
p=(struct node *)malloc(sizeof(struct node));
p->val=data;
p->left=p->right=NULL;
return p;
}
void levelorder(struct node *root){
    struct node *temp;
    temp=root;
    struct queue q;
    q.front=q.rear=0;
    while(temp)
    {
        printf(" %d ",temp->val);
        if(temp->left!=NULL)
             enqueue(&q,temp->left);
        if(temp->right!=NULL)
             enqueue(&q,temp->right);
        temp=dequeue(&q);
    }
        
    
    
}
void inorder(struct node *p){
     if(p!=NULL){
        inorder(p->left);
        printf(" %d ",p->val);
        inorder(p->right);
    }
}

struct node *insertlevelorder(int arr[],struct node *root,int i,int n){
if(i<n){
        struct node *temp=newnode(arr[i]);
        root=temp;

root->left=insertlevelorder(arr,root->left,2*i+1,n);
root->right=insertlevelorder(arr,root->right,2*i+2,n);
}
return root;
}
int main(){
int arr[10],k,n;
printf("Enter number of terms:");
scanf("%d",&n);
for(k=0;k<n;k++){
    printf("Enter element:");
    scanf("%d",&arr[k]);
}
struct node* root=insertlevelorder(arr,root,0,n);
inorder(root);
printf("\n");
levelorder(root);
}
