#include<stdio.h>
#include<stdlib.h>
void directed_graph(int n)
{
    int adj_mat[n][n],key,in_deg=0,out_deg=0,i,j;
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            if(i==j)
                adj_mat[i][j]==0;
            else{
                printf("\nPress 1 if vertex %d and %d are adjacent\n",i,j);
                scanf("%d",&key);
                if(key==1)
                    adj_mat[i][j]=1;
                
            }
        }}
         printf("\nAdjacency matrix is\n");
         for(int i=1;i<=n;i++)
            printf("  %d  ",i);
            printf("\n");
         for(int i=1;i<=n;i++){
             for(int j=1;j<=n;j++){
                 printf("%d",i);
                 printf("  %d  ",adj_mat[i][j]);
             }
         }
         
}
void undirected_graph(int n)
{
    int adj_mat[n][n],key,in_deg=0,out_deg=0,i,j;
    for(i=1;i<=n;i++){
        for(j=1;j<=n;j++){
            if(i==j)
                adj_mat[i][j]==0;
            else{
                printf("\nPress 1 if %d and %d are adjacent\n",i,j);
                scanf("%d",&key);
                if(key==1)
                    adj_mat[i][j]=1;
                
            }
        }}
          for(int i=1;i<=n;i++){
             for(int j=1;j<=n;j++){
              if(adj_mat[i][j]==1){
                  adj_mat[j][i]=1;
              }
          }}
         printf("\nAdjacency matrix is\n");
         for(int i=1;i<=n;i++)
            printf("  %d  ",i);
            printf("\n");
         for(int i=1;i<=n;i++){
             for(int j=1;j<=n;j++){
                 printf("%d",i);
                 printf("  %d  ",adj_mat[i][j]);
             }
             printf("\n");
         }
         
}
int main(){
    int n,ch;
    printf("1.Directed graph\t2.Undirected graph\t3.Exit");
    printf("\nSelect an option\n");
    scanf("%d",&ch);
    switch(ch){
        case 1:printf("\nEnter number of vertices:\n");
               scanf("%d",&n);
               directed_graph(n);
               break;
        case 2:printf("\nEnter number of vertices:\n");
               scanf("%d",&n);
               undirected_graph(n);
               break;
        default:exit(0);
                
    }
}





