# include<stdio.h>
# include<ctype.h>
# include<stdlib.h>
# define SIZE 10
struct stack{
int top;
char data[10];
};
typedef struct stack STACK;
int push(STACK *s,char item)
{
if (s->top==SIZE-1)
    {printf("stack overflow\n");}
else
    {s->top=s->top+1;
    s->data[s->top]=item;
	}
return(0);
}
int pop(STACK *s)
{
	if(s->top==-1)
	{
	printf("stack underflow\n");
	return(-1);
	}
	else
	{
    return(s->data[s->top--]);
	}
}
int preceed(char c)
{
int t;
switch(c)
	{
	case '$':t=6;
    	break;
	case '*':t=5;
	break;
	case '/':t=5;
	break;
	case '+':t=4;
	break;
	case '-':t=4;
	break;
	default:exit(0);
	}
return(t);
}
void infix_to_postfix(char in[20],STACK *s)
{int j,l=0,r=0;
	int i;
	j=0;
	int k=1;
	char ch;
	char temp;
 
	char postfix[20];
    for(i=0;in[i]!='\0';i++)
    	{
     	
     	ch=in[i];
         if(isalnum(ch))
            {postfix[j++]=ch;}
     	else if(ch=='(')
        	{
        	l+=1;
            push(s,ch);
        	}
    	else if(ch==')')
        	{
           	r+=1;
               if(s->top==-1 || postfix[0]=='\0' || l==0)
             	{
                  printf("INVALID EXPRESSION");
                   k=0;
                   break; }             	
               temp=pop(s);
            while(temp!='(')
            	{
                postfix[j++]=temp;
                temp=pop(s);
            	}
        	}
    	else
        	{
            if(s->top==-1||s->data[s->top]=='(')
            push(s,ch);
        	else
        	{
            while(preceed(s->data[s->top])>=preceed(ch)&&s->top==-1&&s->data[s->top]=='(')
            postfix[j++]=pop(s);
            push(s,ch);
        	}
        	}
    	}
        while(s->top!=-1)
    	{
        postfix[j++]=pop(s);
 	   }
	postfix[j]='\0';
 
if(k && l==r)
printf("\npostfix expression is  %s\n",postfix);
else
printf(" \nRE-ENTER EXPRESSION");
 
}
int main()
{
STACK s;
s.top=-1;
char in[20];
printf("\nplease enter the infix expression\n");
scanf("%s",in);
infix_to_postfix(in,&s);
}
