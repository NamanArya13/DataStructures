#include<stdio.h>
#include<stdlib.h>
struct node{
    int info;
    struct node *next;
};
struct node *head1;
struct node *head2;
struct node *head3;
struct node *getnode(int ele){
    struct node *temp;
    temp=(struct node *)malloc(sizeof(struct node));
    temp->info=ele;
    temp->next=NULL;
    return temp;
}
struct node *insertfront(struct node *a,int ele){
    struct node *p;
    p=getnode(ele);
    if(a==NULL){
       a=p;
       return a;}
    else{
    p->next=a;
    a=p;
        return a;
    }
}
int deletefront(struct node *a){
    if(a==NULL){
       printf("\nLIST EMPTY\n");
       return -1;}
    else{
        if(a->next==NULL){
            int m;
            m=a->info;
            printf("\nDELETED %d\n",m);
            free(a);
            a=NULL;
            return m;
        }
    else{
        struct node *p;
        p=a;
        a=a->next;
        printf("\n DELETED %d\n",p->info);
        return p->info;
        free(p);
    }
    }
}
void display(struct node *a){
       struct node *p;
    if(a==NULL)
        printf("\nEMPTY LIST\n");
    p=a;
    printf("\nLIST CONTENTS: ");
    while(p!=NULL){
        printf(" %d ",p->info);
        p=p->next;
    }
    printf("\n");
}
struct node *insertend(struct node *a,int ele){
    struct node *p;
    p=getnode(ele);
    if(a==NULL){
       a=p;
       return a;}
    else{
        struct node *q;
        q=a;
        while(q->next!=NULL)
             q=q->next;
        q->next=p;
        return a;
        
    }
}

int deletedend(struct node *a){
    struct node *p;
    if(a==NULL){
      printf("\n LIST IS EMPTY\n");
      return -1;}
    else{
        if(a->next==NULL){
            int m;
            m=a->info;
            printf("\n deleted %d\n",a->info);
            free(a);
            a=NULL;
            return m;
        }
        else{
            struct node *q;
            q=a;
            while(q->next->next!=NULL)
                q=q->next;
            p=q->next;
            q->next=NULL;
            printf("\n DELETED: %d\n",p->info);
            return p->info;
            free(p);
        }
    }
}

struct node *biglist(struct node *a,struct node *b,int e){
    struct node *p;
    struct node *q;
    struct node *r;
    q=a;
    r=b;
    p=NULL;
    for(int i=0;i<e;i++){
        if(q->info>r->info){
            p=insertend(p,q->info);
            q=q->next;
            r=r->next;
        }else{
            p=insertend(p,r->info);
                 q=q->next;
            r=r->next;
            }
        }
        return p;
}
int main(){
struct node *head1;
struct node *head2;
struct node *head3;

    head1=NULL;
    head2=NULL;
    head3=NULL;
    
    int n1,n2,ele;
    printf("\nEnter number of elements in first list:\n");
    scanf("%d",&n1);
    printf("\nEnter number of elements in second list:\n");
    scanf("%d",&n2);
    printf("\nFor List 1\n");
    for(int i=0;i<n1;i++){
        printf("\nEnter element: \n");
        scanf("%d",&ele);
        head1=insertend(head1,ele);
        
    }
   
      
      printf("\nFor List 2\n");
      for(int i=0;i<n2;i++){
        printf("\nEnter element: \n");
        scanf("%d",&ele);
        head2=insertend(head2,ele);
    }
    display(head1);
    display(head2);
    head3=biglist(head1,head2,n1);
    display(head3);
    
    
    
    
    
}
