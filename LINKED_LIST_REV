#include<stdio.h>
#include<stdlib.h>
struct node{
    int val;
    struct node *next;
};
struct node *head;
struct node *getnode(int data){
    struct node *p;
    p=(struct node *)malloc(sizeof(struct node));
    p->val=data;
    p->next=NULL;
    return p;
}
void insertend(int ele){
    struct node *temp;
    temp=getnode(ele);
    struct node *p;
    p=head;
    if(head==NULL)
        head=temp;
    else{
        while(p->next!=NULL)
            p=p->next;
            p->next=temp;
    }
}
int deletefront(){
    int k;
    if(head==NULL){
        printf("\nEmpty List\n");
        return -12345;}
    else if(head->next==NULL){
        k=head->val;
        free(head);
         head=NULL;
        printf("\nDeleted element is %d\n",k);
        return k;
    }
    else{
        struct node *p;
        p=head;
        head=head->next;
        k=p->val;
        printf("\nDeleted element is %d\n",k);
        return k;
    }
}
void display(){
       struct node *p;
    if(head==NULL)
        printf("\nEMPTY LIST\n");
    p=head;
    printf("\nLIST CONTENTS: ");
    while(p!=NULL){
        printf(" %d ",p->val);
        p=p->next;
    }
    printf("\n");
}
struct node *reverse(struct node *p){
    struct node* prev = NULL;
    struct node* current = p;
    struct node* temp = NULL;
    while (current != NULL) {
        // Store next
        temp = current->next;
 
        // Reverse current node's pointer
        current->next = prev;
 
        // Move pointers one position ahead.
        prev = current;
        current = temp;
    }
    p = prev;
    return p;}
int main(){
    head=NULL;
    int ch,ele;
     while(1){
        printf("1.INSERT ELEMENT\t2.DELETE ELEMENT\t3.DISPLAY\t4.REVERSE\t5.EXIT\n");
        scanf("%d",&ch);
        switch(ch){
            case 1:printf("\nENTER ELEMENT TO INSERT:");
                   scanf("%d",&ele);
                   insertend(ele);
                   break;
            case 2:deletefront();
                   break;
            case 3:display();
                   break;
            case 4:head=reverse(head);
                    display();
                    break;
            default:exit(0);
    }
}   }
    
    
    
    
    
    
    
    
    
