
#include<stdio.h>
#define size 5
#include<stdlib.h>
#include<string.h>
struct queue
{
    int front, rear;
    char data[size][20];
};
typedef struct queue Cqueue;
void enqueue(Cqueue *q, char item[20])
{
    if(q->front==(q->rear+1)%size)
        printf("\nQueue is full\n");
    else{
        q->rear=(q->rear+1)%size;
        strcpy(q->data[q->rear],item);
        if(q->front==-1)
            q->front=0;
    }
}
void dequeue(Cqueue *q)
{
 char *del;
 if(q->front==-1)
        printf("\nQueue is empty\n");
 else
 {
    del = q->data[q->front];
    printf("\nThe message retrieved is: %s \n",q->data[q->front]);

   if(q->front==q->rear)
    {//printf("\n The message retreived is  \n");
     printf("%s",q->data[q->front]);
     q->front=-1;
     q->rear=-1;
    }
    else{
         //printf("\n The deleted element is \t%d",q->data[q->front]);
        q->front=(q->front+1)%size;
 }
}
}
void display(Cqueue q)
{   int i=0;
    if(q.front==-1)
        printf("\nQueue is empty");
    else
    {   printf("\nThe elements of the queue are\n");
        for(i=q.front;i!=q.rear;i=(i+1)%size)
        {
            printf("%s\n",q.data[i]);
        }
        printf("%s\n",q.data[i]);
    }
}

int main()
{   int i;
    Cqueue q;
    q.front=-1;
    q.rear=-1;
    int ch;
    char item[20];

    while(ch!=4)
    {
    printf("\n1 Sender\n2 Receiver\n3 Display\n4 Exit\n\n");
    scanf("%d",&ch);
    getchar();
    switch(ch)
    {
        case 1:
            printf("\nRead message to send\n");
            gets(item);
            enqueue(&q,item);
            break;

        case 2:
            dequeue(&q);
            break;
        case 3:
            display(q);
            break;
        default:
            exit(0);
            break;
    }
    }
    return 0;
}
