#include<stdio.h>
#define MAX 100
#include<stdlib.h>

struct queue
{
    int front, rear;
    int que[MAX];
};
typedef struct queue QUEUE;
void enqueue(QUEUE *q, int ele)
{
    if(q->rear==MAX)
        printf("\nQueue is full\n");
    else{
        q->rear=(q->rear+1);
        q->que[q->rear]=ele;
        if(q->front==-1)
            q->front=0;
    }
}
int dequeue(QUEUE *q)
{
 int k;
 if(q->front==-1){
        printf("\nQueue is empty\n");
        return -1;}
 else
 {
    k=q->que[q->front];
    

   if(q->front==q->rear)
    {//printf("\n The message retreived is  \n");
     //printf("%s",q->data[q->front]);
     q->front=-1;
     q->rear=-1;
    }
    else{
         //printf("\n The deleted element is \t%d",q->data[q->front]);
        q->front=(q->front+1);
 }
 return k;
}
}
void display(QUEUE q)
{   int i=0;
    if(q.front==-1)
        printf("\nQUEUE is empty");
    else
    {   printf("\nThe elements of the queue are\n");
        for(i=q.front;i!=q.rear;i++)
        {
            printf("%d\n",q.que[i]);
        }
        printf("%d\n",q.que[i]);
    }
}
void reverse(QUEUE *q){
    int i;
    QUEUE q1;
    q1.front=-1;
    q1.rear=-1;
    for(i=q->rear;i!=q->front;i--){
        printf(" %d %d",q->rear,q->front);
        enqueue(&q1,q->que[i]);
        
        dequeue(q);
    }
     for(i=q1.front;i!=q1.rear;i++){
        enqueue(q,q1.que[i]);
        
        
    }
    
    
    
    
    
    
    
}
int main()
{   int i;
    QUEUE q;
    q.front=-1;
    q.rear=-1;
    int ch;
    int ele,m;
    while(ch!=5)
    {
    printf("\n1 ADD ELEMENT\t2 REMOVE ELEMENT\t3 DISPLAY\t4 REVERSE\t5.EXIT\n");
    scanf("%d",&ch);
    switch(ch)
    {
        case 1:
            printf("\nEnter element to add\n");
            scanf("%d",&ele);
            enqueue(&q,ele);
            break;
        case 2:
            m=dequeue(&q);
            if(m!=-1)
            printf("\nThe deleted element is: %d \n",m);
            break;
        case 3:
            display(q);
            break;
        case 4:
            reverse(&q);
            display(q);
            break;
        default:
            exit(0);
            break;
    }
    }
    return 0;
}
