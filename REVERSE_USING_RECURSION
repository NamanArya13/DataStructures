#include<stdio.h>
#include<stdlib.h>
#define MAX 10
struct queue{
    int val[MAX];
    int front;
    int rear;
}q;
void enqueue(int ele){
    if(q.rear==MAX)
        printf("\nQueue is full\n");
    else{
        q.val[q.rear++]=ele;
    }
}
int dequeue(){
    int r;
    if(q.front==q.rear){
    printf("\nUNDERFLOW\n");
    return 0;}
    else{
        r=q.val[q.front];
        q.front++;
        if(q.front==q.rear)
        q.front=q.rear=0;
        return r;
    }
}
void display(){
    if(q.front==q.rear)
    printf("\nEMPTY QUEUE\n");
    else{
        printf("QUEUE CONTENTS=");
    for(int i=q.front;i<q.rear;i++)
    printf(" %d ",q.val[i]);
}}
void reverse(int f,int r){
    int m,k;
    if(f==r || f==r+1)          // 0 OR 1 ELEMENT RETURN AS IT IS
        return;
    else{
        m=q.val[r-1];           // SWAP FRONT=f AND REAR=r ELEMENT
        k=f;                    
        q.val[r-1]=q.val[k];  
        q.val[k]=m;
        r--;                    // INCREMENT f and DECREMENT r
        f++;
        reverse(f,r);           //SWAP (f+1)th and (r-1)th element using recursion
    }
        
}
int main(){
    q.rear=q.front=0;
    int ele,ch,k;
    while(1){
        printf("\n1.INSERT\t\t2.DELETE\t\t3.DISPLAY\t\t4.REVERSE\t\t5.EXIT\n");
        scanf("%d",&ch);
        switch(ch){
            case 1:printf("\nENTER ELEMENT: \n");
                   scanf("%d",&ele);
                   enqueue(ele);
                   break;
            case 2:k=dequeue();
                   printf("\nDELETED ELEMENT=%d\n ",k);
                   break;
            case 3:display();
                   break;
            case 4:reverse(q.front,q.rear);
                   printf("\nq.front=%d q.rear=%d",q.front,q.rear);
                   break;
            default:return(0);
        }   
        
    }
}
